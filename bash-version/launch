#!/bin/bash



################# Function Definition ###################

function GenerateUserDataFile
{
	
# Generate USER-DATA File

cat << EOF > $UserDataFile
#!/bin/bash

# 1.    Install Puppet and Get
yum -y install puppet git

#2.     Back up orignal puppet Directory
mv /etc/puppet /etc/puppet.orig

#3.     Check out xMatters Puppet Configuration from Git Repository

git clone --bare https://github.com/zparihar/xmatters-puppet.git /etc/puppet
rm -fr /etc/puppet/*
git clone https://github.com/zparihar/xmatters-puppet.git /etc/puppet


#4.     Define role of local serveer

# e.g. for if $AppType1 or $AppType2 is passed to the server

touch /etc/$AppType

#5.     Create a custom Fact for the Role type of this server

cat << endmsg > /usr/share/ruby/vendor_ruby/facter/role.rb
# role.rb
#
require 'facter'
Facter.add("role") do
        setcode do
                if File.exist? '/etc/$AppType1'
                        '$AppType1'
                end
        end
end

Facter.add("role") do
        setcode do
                if File.exist? '/etc/$AppType2'
                        '$AppType2'
                end
        end
end
endmsg


#6.	Configure disk Partition

parted -s -a optimal /dev/xvdb mklabel msdos
parted -s -a optimal /dev/xvdb mkpart primary ext2 0% 100%
mkfs.xfs -f /dev/xvdb1


#7.    Define Role type based on Environment and App Type

puppet apply --modulepath=/etc/puppet/environments/${EnvironmentType}/modules /etc/puppet/manifests/site.pp

EOF

}


# --------------- Variable Definitions --------------- # 
AWS=`/usr/bin/which aws`
CHMOD=`/usr/bin/which chmod`
DATE=`/usr/bin/which date`
CurrentDateStamp=`$DATE +%Y_%m_%d_%H_%M_%S_%N`
UserDataFile=user-data-${CurrentDateStamp}.sh
AppType1=awsproxyserver
AppType2=awswebserver
AWSDefaultAmi=ami-4dbf9e7d
AWSInstanceType=t2.micro
AWSSecurityGroups=default
AWSAvailabilityZone=us-west-2a


#####  TODO ##################
# Check to See if AWS Exists
# If not
# 1. Find out OS (RHEL Based, DEB Based or OSX)
# 2. Download and install the CLI Tool (Version 1.2.9)
# 3. Setup LOGGER
# 4. Create Log Directory
# 5. Create User-Data Directory
##############################





#USAGE: launch -a <app> -e <environment> -n <numb_server> -s <server_size>

usage()
{
cat << EOF

usage: $0 -a <app> -e <environment> -n <numb_server> -s <server_size>

OPTIONS:
   -h      Show this message
   -a      Application Type can be '$AppType1' or '$AppType2'
   -e      Environment type can be 'development' or 'production'
   -n      Number of Servers to create should be between 1 and 10
   -s      Server size can be between 1 and 10.  The number is in Gigabytes.

EOF
}

AppType=
EnvironmentType=
NumOfServers=
SizeOfServers=

while getopts “ha:e:n:s:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         a)
             AppType=$OPTARG
                        if [ "$AppType" != "$AppType1" ] && [ "$AppType" != "$AppType2" ]
                        then
                                echo
                                echo "The -a argument value must be either '$AppType1' or '$AppType2'"
                                echo
                                usage
                                exit 1
                        fi
             ;;
         e)
             EnvironmentType=$OPTARG
                        if [ "$EnvironmentType" != "development" ] && [ "$EnvironmentType" != "production" ] 
                        then
                                echo
                                echo "The -e argument value must be either 'development' or 'production'"
                                echo
                                usage
                                exit 1
                        fi
             ;;
         n)
             NumOfServers=$OPTARG

                        # Check to see if this is a valid integer
                        if [[ $NumOfServers =~ ^-?[0-9]+$ ]]
                        then
                                echo "$NumOfServers is an integer" > /dev/null
                        else
                                echo "-n $NumOfServers is not an integer"
                                usage
                                exit 1
                        fi


                       if [ $NumOfServers -gt 10 ] || [ $NumOfServers -lt 1 ]
                       then
                               echo
                               echo "The Number of Servers are out of range.  Please Choose Between     1 and 10 Servers"
                               echo
                               usage
                               exit 1
                       fi
             ;;
         s)
             SizeOfServers=$OPTARG

                        # Check to see if this is a valid integer
                        if [[ $SizeOfServers =~ ^-?[0-9]+$ ]]
                        then
                                echo "$SizeOfServers is an integer" > /dev/null
                        else
                                echo "-s $SizeOfServers is not an integer"
                                usage
                                exit 1
                        fi

                        if [ $SizeOfServers -gt 10 ] || [ $SizeOfServers -lt 1 ]
                        then
                                echo
                                echo "The size of Servers are out of range.  Please choose between 1 and 10 Gigabytes"
                                echo
                                usage
                                exit 1
                        fi
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [[ -z $AppType ]] || [[ -z $EnvironmentType ]] || [[ -z $NumOfServers ]] || [[ -z $SizeOfServers ]]
then
     usage
     exit 1
fi




#1	Generate the User Data file

GenerateUserDataFile



#2	Create Keypair on Amazon and create the PEM File with appropriate permissions


KeyPairName=$CurrentDateStamp
KeyPairNameFile=${KeyPairName}.pem

$AWS ec2 create-key-pair --key-name $KeyPairName --query 'KeyMaterial' --output text > $KeyPairNameFile

$CHMOD 400 $KeyPairNameFile


#3	Create Instance(s) with KeyPairName

#USERDATA VERSION
$AWS ec2 run-instances --image-id $AWSDefaultAmi --count $NumOfServers --instance-type $AWSInstanceType --key-name $KeyPairName --placement AvailabilityZone=$AWSAvailabilityZone --user-data file://$UserDataFile --security-groups $AWSSecurityGroups | tee ${KeyPairName}-instance.log

#NO USERDATA VERSION
#$AWS ec2 run-instances --image-id $AWSDefaultAmi --count $NumOfServers --instance-type $AWSInstanceType --key-name $KeyPairName --placement AvailabilityZone=$AWSAvailabilityZone --security-groups $AWSSecurityGroups | tee ${KeyPairName}-instance.log

INSTANCEIDS=`grep InstanceId ${KeyPairName}-instance.log | awk '{print $4;}'`


# ------- BASH Notes ------- #
# capture instance id into variable array
# grep InstanceId create-instance.log | awk '{print $4;}'

#Printing Solution:
#Print first variable
# echo $INSTANCEIDS | awk -v N=1 '{print $N}'
#Print second variable
# echo $INSTANCEIDS | awk -v N=2 '{print $N}'
# -------------------------- #



#4	Create Volumes to attach to Instance

# Do a For Loop for the number of Instances created

for (( i=1 ; i<=$NumOfServers ; i+=1 ))
do
	$AWS ec2 create-volume --size $SizeOfServers --availability-zone $AWSAvailabilityZone | tee ${KeyPairName}-volume${i}.log
done

VOLUMEIDS=`cat ${KeyPairName}-volume* | grep VolumeId | awk '{print $4}'`

# ------- BASH Notes ------- #
# capture volume id into variable array
# grep VolumeId Volume.log | awk '{print $4;}'

#Printing Solution:
#Print first variable
# echo $VOLUMEIDS | awk -v N=1 '{print $N}'
#Print second variable
# echo $VOLUMEIDS | awk -v N=2 '{print $N}'
# -------------------------- #



#5	Attach Volumes to Instances

# Wait till Instance is up for the volume to be able to connect correctly
echo
echo "Waiting for Instances to start"
echo
sleep 30

# Todo - Improve this process by querying to see if the instance is fully running #


for (( i=1 ; i<=$NumOfServers ; i+=1 ))
do
        INSTANCE=`echo $INSTANCEIDS | awk -v N=${i} '{print $N}'`
        VOLUME=`echo $VOLUMEIDS | awk -v N=${i} '{print $N}'`

        $AWS ec2 attach-volume --volume-id $VOLUME --instance-id $INSTANCE --device /dev/xvdb | tee ${KeyPairName}-attach-volume${i}.log
done


#7	Grab the Public IP Address and the Public DNS Name from the Instance-id's and display how to connect to the Instances

echo
echo
echo
echo "HERE ARE THE DETAILS ON HOW TO LOGIN TO YOUR SERVER INSTANCES:"
echo 
echo "Use the following Username:	ec2-user"
echo "Use the following SSH KEY: 	$KeyPairNameFile"
echo
echo

for (( i=1 ; i<=$NumOfServers ; i+=1 ))
do
        INSTANCE=`echo $INSTANCEIDS | awk -v N=${i} '{print $N}'`
	
	echo "IP Address and Public DNS Name of INSTANCE: $INSTANCE"
	echo
	$AWS ec2 describe-instances --instance-ids $INSTANCE --query "Reservations[*].Instances[*].PublicIpAddress" --output text | tee ${KeyPairName}-$INSTANCE-public-ip-address.log
	$AWS ec2 describe-instances --instance-ids $INSTANCE --query "Reservations[*].Instances[*].PublicDnsName" --output text | tee ${KeyPairName}-$INSTANCE-public-dns-name.log
	echo
	echo
	echo
done


echo
echo
echo "Examples"
echo
echo "ssh -i sshkey.pem ec2-user@ip-address-of-instance"
echo
echo
echo

